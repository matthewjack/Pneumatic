Notes without another home
--------------------------

A profiling system will eventually be handy

If assertions form part of an interface, can they be done in such a way that they can also be unit tested?
Perhaps they can be axceptions, and thus caught, or perhaps they can be compiled into setting a flag for checking instead.
Already, with the time system, knowing that there are assertions on certain events is crucial.

Sometimes the unit tests may require extra functions that simulate things like lengths of time passing, or unreadable files, or...

The singular of Pneumata is Pneumata.

Basic smartpointers seem useful in a bunch of places. Fish those out.

One advantage of "silly" base types like just defining a destructor: you can call delete on an interface without knowing anything about it - at least in principle.

SVG is useful for both rendering and physics meshes
SVG + textures is appealing. For 2D modelling it seems like a perfect fit: create the mesh first, colours and all, then overlay textures.
Texture coordinates could be a direct mapping of a same-size bitmap, or we could get more versatile?

Overall approach to ordering of functions within APIs: group by interface, group by functionality, order alphabetically, in that order.
Hence Create is followed by Destroy, then we continue down the alphabet. Cpp file follows header order. Hopefully aboid ever swapping around.
In cpp files, inner class definitions move to the top. Otherwise we would be mixing its definition with those of the outer class

Try to avoid functions called "Get". Much nore helpful to include what you're getting.

Should I consider exceptions? That is probably best left as a big refactor for later... Or is it.

Other nice things to have: wrapped array. Ah, Boost has one? array_wrapper was suggested by Stroustrup

Lots of use of unsigned, where size_t would probably be correct

Ned uint 32 for a few things. Like enum flags.